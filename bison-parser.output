Terminals which are not used

   SFREPETA
   PANACAND
   REPETA
   MOD
   IFSTMT
   WHILESTMT
   OTHER
   RELATION


Grammar

    0 $accept: prog $end

    1 prog: header lista_decl lista_instr final

    2 header: INTDECL MAIN LEFT_PAR RIGHT_PAR LEFT_BR

    3 lista_decl: /* empty */
    4           | decl SEMICOLON lista_decl

    5 decl: INTDECL variabila

    6 variabila: ID
    7          | INTEGER

    8 lista_instr: /* empty */
    9            | instr SEMICOLON lista_instr

   10 instr: attr
   11      | inout

   12 attr: ID EQUALS exp

   13 exp: variabila
   14    | variabila PLUS exp
   15    | variabila MINUS exp
   16    | variabila DIV exp
   17    | variabila MUL exp

   18 inout: INOP INOPF variabila
   19      | OUTOP OUTOPF exp

   20 final: RETURN INTEGER SEMICOLON RIGHT_BR


Terminals, with rules where they appear

$end (0) 0
error (256)
SFREPETA (258)
PANACAND (259)
REPETA (260)
OUTOPF (261) 19
INOPF (262) 18
RETURN (263) 20
MAIN (264) 2
LEFT_PAR (265) 2
RIGHT_PAR (266) 2
LEFT_BR (267) 2
RIGHT_BR (268) 20
PLUS (269) 14
MINUS (270) 15
DIV (271) 16
MUL (272) 17
MOD (273)
INOP (274) 18
OUTOP (275) 19
IFSTMT (276)
WHILESTMT (277)
INTDECL (278) 2 5
EQUALS (279) 12
OTHER (280)
SEMICOLON (281) 4 9 20
RELATION (282)
ID (283) 6 12
INTEGER (284) 7 20


Nonterminals, with rules where they appear

$accept (30)
    on left: 0
prog (31)
    on left: 1, on right: 0
header (32)
    on left: 2, on right: 1
lista_decl (33)
    on left: 3 4, on right: 1 4
decl (34)
    on left: 5, on right: 4
variabila (35)
    on left: 6 7, on right: 5 13 14 15 16 17 18
lista_instr (36)
    on left: 8 9, on right: 1 9
instr (37)
    on left: 10 11, on right: 9
attr (38)
    on left: 12, on right: 10
exp (39)
    on left: 13 14 15 16 17, on right: 12 14 15 16 17 19
inout (40)
    on left: 18 19, on right: 11
final (41)
    on left: 20, on right: 1


state 0

    0 $accept: . prog $end

    INTDECL  shift, and go to state 1

    prog    go to state 2
    header  go to state 3


state 1

    2 header: INTDECL . MAIN LEFT_PAR RIGHT_PAR LEFT_BR

    MAIN  shift, and go to state 4


state 2

    0 $accept: prog . $end

    $end  shift, and go to state 5


state 3

    1 prog: header . lista_decl lista_instr final

    INTDECL  shift, and go to state 6

    $default  reduce using rule 3 (lista_decl)

    lista_decl  go to state 7
    decl        go to state 8


state 4

    2 header: INTDECL MAIN . LEFT_PAR RIGHT_PAR LEFT_BR

    LEFT_PAR  shift, and go to state 9


state 5

    0 $accept: prog $end .

    $default  accept


state 6

    5 decl: INTDECL . variabila

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 11

    variabila  go to state 12


state 7

    1 prog: header lista_decl . lista_instr final

    INOP   shift, and go to state 13
    OUTOP  shift, and go to state 14
    ID     shift, and go to state 15

    $default  reduce using rule 8 (lista_instr)

    lista_instr  go to state 16
    instr        go to state 17
    attr         go to state 18
    inout        go to state 19


state 8

    4 lista_decl: decl . SEMICOLON lista_decl

    SEMICOLON  shift, and go to state 20


state 9

    2 header: INTDECL MAIN LEFT_PAR . RIGHT_PAR LEFT_BR

    RIGHT_PAR  shift, and go to state 21


state 10

    6 variabila: ID .

    $default  reduce using rule 6 (variabila)


state 11

    7 variabila: INTEGER .

    $default  reduce using rule 7 (variabila)


state 12

    5 decl: INTDECL variabila .

    $default  reduce using rule 5 (decl)


state 13

   18 inout: INOP . INOPF variabila

    INOPF  shift, and go to state 22


state 14

   19 inout: OUTOP . OUTOPF exp

    OUTOPF  shift, and go to state 23


state 15

   12 attr: ID . EQUALS exp

    EQUALS  shift, and go to state 24


state 16

    1 prog: header lista_decl lista_instr . final

    RETURN  shift, and go to state 25

    final  go to state 26


state 17

    9 lista_instr: instr . SEMICOLON lista_instr

    SEMICOLON  shift, and go to state 27


state 18

   10 instr: attr .

    $default  reduce using rule 10 (instr)


state 19

   11 instr: inout .

    $default  reduce using rule 11 (instr)


state 20

    4 lista_decl: decl SEMICOLON . lista_decl

    INTDECL  shift, and go to state 6

    $default  reduce using rule 3 (lista_decl)

    lista_decl  go to state 28
    decl        go to state 8


state 21

    2 header: INTDECL MAIN LEFT_PAR RIGHT_PAR . LEFT_BR

    LEFT_BR  shift, and go to state 29


state 22

   18 inout: INOP INOPF . variabila

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 11

    variabila  go to state 30


state 23

   19 inout: OUTOP OUTOPF . exp

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 11

    variabila  go to state 31
    exp        go to state 32


state 24

   12 attr: ID EQUALS . exp

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 11

    variabila  go to state 31
    exp        go to state 33


state 25

   20 final: RETURN . INTEGER SEMICOLON RIGHT_BR

    INTEGER  shift, and go to state 34


state 26

    1 prog: header lista_decl lista_instr final .

    $default  reduce using rule 1 (prog)


state 27

    9 lista_instr: instr SEMICOLON . lista_instr

    INOP   shift, and go to state 13
    OUTOP  shift, and go to state 14
    ID     shift, and go to state 15

    $default  reduce using rule 8 (lista_instr)

    lista_instr  go to state 35
    instr        go to state 17
    attr         go to state 18
    inout        go to state 19


state 28

    4 lista_decl: decl SEMICOLON lista_decl .

    $default  reduce using rule 4 (lista_decl)


state 29

    2 header: INTDECL MAIN LEFT_PAR RIGHT_PAR LEFT_BR .

    $default  reduce using rule 2 (header)


state 30

   18 inout: INOP INOPF variabila .

    $default  reduce using rule 18 (inout)


state 31

   13 exp: variabila .
   14    | variabila . PLUS exp
   15    | variabila . MINUS exp
   16    | variabila . DIV exp
   17    | variabila . MUL exp

    PLUS   shift, and go to state 36
    MINUS  shift, and go to state 37
    DIV    shift, and go to state 38
    MUL    shift, and go to state 39

    $default  reduce using rule 13 (exp)


state 32

   19 inout: OUTOP OUTOPF exp .

    $default  reduce using rule 19 (inout)


state 33

   12 attr: ID EQUALS exp .

    $default  reduce using rule 12 (attr)


state 34

   20 final: RETURN INTEGER . SEMICOLON RIGHT_BR

    SEMICOLON  shift, and go to state 40


state 35

    9 lista_instr: instr SEMICOLON lista_instr .

    $default  reduce using rule 9 (lista_instr)


state 36

   14 exp: variabila PLUS . exp

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 11

    variabila  go to state 31
    exp        go to state 41


state 37

   15 exp: variabila MINUS . exp

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 11

    variabila  go to state 31
    exp        go to state 42


state 38

   16 exp: variabila DIV . exp

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 11

    variabila  go to state 31
    exp        go to state 43


state 39

   17 exp: variabila MUL . exp

    ID       shift, and go to state 10
    INTEGER  shift, and go to state 11

    variabila  go to state 31
    exp        go to state 44


state 40

   20 final: RETURN INTEGER SEMICOLON . RIGHT_BR

    RIGHT_BR  shift, and go to state 45


state 41

   14 exp: variabila PLUS exp .

    $default  reduce using rule 14 (exp)


state 42

   15 exp: variabila MINUS exp .

    $default  reduce using rule 15 (exp)


state 43

   16 exp: variabila DIV exp .

    $default  reduce using rule 16 (exp)


state 44

   17 exp: variabila MUL exp .

    $default  reduce using rule 17 (exp)


state 45

   20 final: RETURN INTEGER SEMICOLON RIGHT_BR .

    $default  reduce using rule 20 (final)
